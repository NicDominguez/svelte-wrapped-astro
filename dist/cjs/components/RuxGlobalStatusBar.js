"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* generated by Svelte v3.42.3 */
const internal_1 = require("svelte/internal");
const svelte_1 = require("svelte");
function create_fragment(ctx) {
    let rux_global_status_bar;
    let current;
    const default_slot_template = /*#slots*/ ctx[10].default;
    const default_slot = internal_1.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    return {
        c() {
            rux_global_status_bar = internal_1.element("rux-global-status-bar");
            if (default_slot)
                default_slot.c();
            internal_1.set_custom_element_data(rux_global_status_bar, "include-icon", /*includeIcon*/ ctx[0]);
            internal_1.set_custom_element_data(rux_global_status_bar, "include-app-state", /*includeAppState*/ ctx[1]);
            internal_1.set_custom_element_data(rux_global_status_bar, "include-username", /*includeUsername*/ ctx[2]);
            internal_1.set_custom_element_data(rux_global_status_bar, "app-domain", /*appDomain*/ ctx[3]);
            internal_1.set_custom_element_data(rux_global_status_bar, "app-name", /*appName*/ ctx[4]);
            internal_1.set_custom_element_data(rux_global_status_bar, "app-version", /*appVersion*/ ctx[5]);
            internal_1.set_custom_element_data(rux_global_status_bar, "menu-icon", /*menuIcon*/ ctx[6]);
        },
        m(target, anchor) {
            internal_1.insert(target, rux_global_status_bar, anchor);
            if (default_slot) {
                default_slot.m(rux_global_status_bar, null);
            }
            /*rux_global_status_bar_binding*/ ctx[11](rux_global_status_bar);
            current = true;
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
                    internal_1.update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[9], !current
                        ? internal_1.get_all_dirty_from_scope(/*$$scope*/ ctx[9])
                        : internal_1.get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null), null);
                }
            }
            if (!current || dirty & /*includeIcon*/ 1) {
                internal_1.set_custom_element_data(rux_global_status_bar, "include-icon", /*includeIcon*/ ctx[0]);
            }
            if (!current || dirty & /*includeAppState*/ 2) {
                internal_1.set_custom_element_data(rux_global_status_bar, "include-app-state", /*includeAppState*/ ctx[1]);
            }
            if (!current || dirty & /*includeUsername*/ 4) {
                internal_1.set_custom_element_data(rux_global_status_bar, "include-username", /*includeUsername*/ ctx[2]);
            }
            if (!current || dirty & /*appDomain*/ 8) {
                internal_1.set_custom_element_data(rux_global_status_bar, "app-domain", /*appDomain*/ ctx[3]);
            }
            if (!current || dirty & /*appName*/ 16) {
                internal_1.set_custom_element_data(rux_global_status_bar, "app-name", /*appName*/ ctx[4]);
            }
            if (!current || dirty & /*appVersion*/ 32) {
                internal_1.set_custom_element_data(rux_global_status_bar, "app-version", /*appVersion*/ ctx[5]);
            }
            if (!current || dirty & /*menuIcon*/ 64) {
                internal_1.set_custom_element_data(rux_global_status_bar, "menu-icon", /*menuIcon*/ ctx[6]);
            }
        },
        i(local) {
            if (current)
                return;
            internal_1.transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            internal_1.transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                internal_1.detach(rux_global_status_bar);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_global_status_bar_binding*/ ctx[11](null);
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = svelte_1.createEventDispatcher();
    let { includeIcon = undefined } = $$props;
    let { includeAppState = undefined } = $$props;
    let { includeUsername = undefined } = $$props;
    let { appDomain = undefined } = $$props;
    let { appName = undefined } = $$props;
    let { appVersion = undefined } = $$props;
    let { menuIcon = undefined } = $$props;
    const getWebComponent = () => __ref;
    svelte_1.onMount(() => {
        __mounted = true;
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(7, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_global_status_bar_binding($$value) {
        internal_1.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(7, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('includeIcon' in $$props)
            $$invalidate(0, includeIcon = $$props.includeIcon);
        if ('includeAppState' in $$props)
            $$invalidate(1, includeAppState = $$props.includeAppState);
        if ('includeUsername' in $$props)
            $$invalidate(2, includeUsername = $$props.includeUsername);
        if ('appDomain' in $$props)
            $$invalidate(3, appDomain = $$props.appDomain);
        if ('appName' in $$props)
            $$invalidate(4, appName = $$props.appName);
        if ('appVersion' in $$props)
            $$invalidate(5, appVersion = $$props.appVersion);
        if ('menuIcon' in $$props)
            $$invalidate(6, menuIcon = $$props.menuIcon);
        if ('$$scope' in $$props)
            $$invalidate(9, $$scope = $$props.$$scope);
    };
    return [
        includeIcon,
        includeAppState,
        includeUsername,
        appDomain,
        appName,
        appVersion,
        menuIcon,
        __ref,
        getWebComponent,
        $$scope,
        slots,
        rux_global_status_bar_binding
    ];
}
class RuxGlobalStatusBar extends internal_1.SvelteComponent {
    constructor(options) {
        super();
        internal_1.init(this, options, instance, create_fragment, internal_1.safe_not_equal, {
            includeIcon: 0,
            includeAppState: 1,
            includeUsername: 2,
            appDomain: 3,
            appName: 4,
            appVersion: 5,
            menuIcon: 6,
            getWebComponent: 8
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get includeIcon() {
        return this.$$.ctx[0];
    }
    set includeIcon(includeIcon) {
        this.$$set({ includeIcon });
        internal_1.flush();
    }
    get includeAppState() {
        return this.$$.ctx[1];
    }
    set includeAppState(includeAppState) {
        this.$$set({ includeAppState });
        internal_1.flush();
    }
    get includeUsername() {
        return this.$$.ctx[2];
    }
    set includeUsername(includeUsername) {
        this.$$set({ includeUsername });
        internal_1.flush();
    }
    get appDomain() {
        return this.$$.ctx[3];
    }
    set appDomain(appDomain) {
        this.$$set({ appDomain });
        internal_1.flush();
    }
    get appName() {
        return this.$$.ctx[4];
    }
    set appName(appName) {
        this.$$set({ appName });
        internal_1.flush();
    }
    get appVersion() {
        return this.$$.ctx[5];
    }
    set appVersion(appVersion) {
        this.$$set({ appVersion });
        internal_1.flush();
    }
    get menuIcon() {
        return this.$$.ctx[6];
    }
    set menuIcon(menuIcon) {
        this.$$set({ menuIcon });
        internal_1.flush();
    }
    get getWebComponent() {
        return this.$$.ctx[8];
    }
}
exports.default = RuxGlobalStatusBar;
//# sourceMappingURL=RuxGlobalStatusBar.js.map