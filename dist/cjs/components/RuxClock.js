"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* generated by Svelte v3.42.3 */
const internal_1 = require("svelte/internal");
const svelte_1 = require("svelte");
function create_fragment(ctx) {
    let rux_clock;
    let current;
    const default_slot_template = /*#slots*/ ctx[9].default;
    const default_slot = internal_1.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
    return {
        c() {
            rux_clock = internal_1.element("rux-clock");
            if (default_slot)
                default_slot.c();
            internal_1.set_custom_element_data(rux_clock, "aos", /*aos*/ ctx[0]);
            internal_1.set_custom_element_data(rux_clock, "los", /*los*/ ctx[1]);
            internal_1.set_custom_element_data(rux_clock, "timezone", /*timezone*/ ctx[2]);
            internal_1.set_custom_element_data(rux_clock, "hide-timezone", /*hideTimezone*/ ctx[3]);
            internal_1.set_custom_element_data(rux_clock, "hide-date", /*hideDate*/ ctx[4]);
            internal_1.set_custom_element_data(rux_clock, "small", /*small*/ ctx[5]);
        },
        m(target, anchor) {
            internal_1.insert(target, rux_clock, anchor);
            if (default_slot) {
                default_slot.m(rux_clock, null);
            }
            /*rux_clock_binding*/ ctx[10](rux_clock);
            current = true;
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
                    internal_1.update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[8], !current
                        ? internal_1.get_all_dirty_from_scope(/*$$scope*/ ctx[8])
                        : internal_1.get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null), null);
                }
            }
            if (!current || dirty & /*aos*/ 1) {
                internal_1.set_custom_element_data(rux_clock, "aos", /*aos*/ ctx[0]);
            }
            if (!current || dirty & /*los*/ 2) {
                internal_1.set_custom_element_data(rux_clock, "los", /*los*/ ctx[1]);
            }
            if (!current || dirty & /*timezone*/ 4) {
                internal_1.set_custom_element_data(rux_clock, "timezone", /*timezone*/ ctx[2]);
            }
            if (!current || dirty & /*hideTimezone*/ 8) {
                internal_1.set_custom_element_data(rux_clock, "hide-timezone", /*hideTimezone*/ ctx[3]);
            }
            if (!current || dirty & /*hideDate*/ 16) {
                internal_1.set_custom_element_data(rux_clock, "hide-date", /*hideDate*/ ctx[4]);
            }
            if (!current || dirty & /*small*/ 32) {
                internal_1.set_custom_element_data(rux_clock, "small", /*small*/ ctx[5]);
            }
        },
        i(local) {
            if (current)
                return;
            internal_1.transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            internal_1.transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                internal_1.detach(rux_clock);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_clock_binding*/ ctx[10](null);
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = svelte_1.createEventDispatcher();
    let { aos = undefined } = $$props;
    let { los = undefined } = $$props;
    let { timezone = undefined } = $$props;
    let { hideTimezone = undefined } = $$props;
    let { hideDate = undefined } = $$props;
    let { small = undefined } = $$props;
    const getWebComponent = () => __ref;
    svelte_1.onMount(() => {
        __mounted = true;
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(6, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_clock_binding($$value) {
        internal_1.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(6, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('aos' in $$props)
            $$invalidate(0, aos = $$props.aos);
        if ('los' in $$props)
            $$invalidate(1, los = $$props.los);
        if ('timezone' in $$props)
            $$invalidate(2, timezone = $$props.timezone);
        if ('hideTimezone' in $$props)
            $$invalidate(3, hideTimezone = $$props.hideTimezone);
        if ('hideDate' in $$props)
            $$invalidate(4, hideDate = $$props.hideDate);
        if ('small' in $$props)
            $$invalidate(5, small = $$props.small);
        if ('$$scope' in $$props)
            $$invalidate(8, $$scope = $$props.$$scope);
    };
    return [
        aos,
        los,
        timezone,
        hideTimezone,
        hideDate,
        small,
        __ref,
        getWebComponent,
        $$scope,
        slots,
        rux_clock_binding
    ];
}
class RuxClock extends internal_1.SvelteComponent {
    constructor(options) {
        super();
        internal_1.init(this, options, instance, create_fragment, internal_1.safe_not_equal, {
            aos: 0,
            los: 1,
            timezone: 2,
            hideTimezone: 3,
            hideDate: 4,
            small: 5,
            getWebComponent: 7
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get aos() {
        return this.$$.ctx[0];
    }
    set aos(aos) {
        this.$$set({ aos });
        internal_1.flush();
    }
    get los() {
        return this.$$.ctx[1];
    }
    set los(los) {
        this.$$set({ los });
        internal_1.flush();
    }
    get timezone() {
        return this.$$.ctx[2];
    }
    set timezone(timezone) {
        this.$$set({ timezone });
        internal_1.flush();
    }
    get hideTimezone() {
        return this.$$.ctx[3];
    }
    set hideTimezone(hideTimezone) {
        this.$$set({ hideTimezone });
        internal_1.flush();
    }
    get hideDate() {
        return this.$$.ctx[4];
    }
    set hideDate(hideDate) {
        this.$$set({ hideDate });
        internal_1.flush();
    }
    get small() {
        return this.$$.ctx[5];
    }
    set small(small) {
        this.$$set({ small });
        internal_1.flush();
    }
    get getWebComponent() {
        return this.$$.ctx[7];
    }
}
exports.default = RuxClock;
//# sourceMappingURL=RuxClock.js.map