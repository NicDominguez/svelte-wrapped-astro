"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* generated by Svelte v3.42.3 */
const internal_1 = require("svelte/internal");
const svelte_1 = require("svelte");
function create_fragment(ctx) {
    let rux_radio_group;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = /*#slots*/ ctx[10].default;
    const default_slot = internal_1.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    return {
        c() {
            rux_radio_group = internal_1.element("rux-radio-group");
            if (default_slot)
                default_slot.c();
            internal_1.set_custom_element_data(rux_radio_group, "label", /*label*/ ctx[0]);
            internal_1.set_custom_element_data(rux_radio_group, "invalid", /*invalid*/ ctx[1]);
            internal_1.set_custom_element_data(rux_radio_group, "name", /*name*/ ctx[2]);
            internal_1.set_custom_element_data(rux_radio_group, "value", /*value*/ ctx[3]);
            internal_1.set_custom_element_data(rux_radio_group, "help-text", /*helpText*/ ctx[4]);
            internal_1.set_custom_element_data(rux_radio_group, "error-text", /*errorText*/ ctx[5]);
        },
        m(target, anchor) {
            internal_1.insert(target, rux_radio_group, anchor);
            if (default_slot) {
                default_slot.m(rux_radio_group, null);
            }
            /*rux_radio_group_binding*/ ctx[11](rux_radio_group);
            current = true;
            if (!mounted) {
                dispose = internal_1.listen(rux_radio_group, "rux-change", /*onEvent*/ ctx[7]);
                mounted = true;
            }
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
                    internal_1.update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[9], !current
                        ? internal_1.get_all_dirty_from_scope(/*$$scope*/ ctx[9])
                        : internal_1.get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null), null);
                }
            }
            if (!current || dirty & /*label*/ 1) {
                internal_1.set_custom_element_data(rux_radio_group, "label", /*label*/ ctx[0]);
            }
            if (!current || dirty & /*invalid*/ 2) {
                internal_1.set_custom_element_data(rux_radio_group, "invalid", /*invalid*/ ctx[1]);
            }
            if (!current || dirty & /*name*/ 4) {
                internal_1.set_custom_element_data(rux_radio_group, "name", /*name*/ ctx[2]);
            }
            if (!current || dirty & /*value*/ 8) {
                internal_1.set_custom_element_data(rux_radio_group, "value", /*value*/ ctx[3]);
            }
            if (!current || dirty & /*helpText*/ 16) {
                internal_1.set_custom_element_data(rux_radio_group, "help-text", /*helpText*/ ctx[4]);
            }
            if (!current || dirty & /*errorText*/ 32) {
                internal_1.set_custom_element_data(rux_radio_group, "error-text", /*errorText*/ ctx[5]);
            }
        },
        i(local) {
            if (current)
                return;
            internal_1.transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            internal_1.transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                internal_1.detach(rux_radio_group);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_radio_group_binding*/ ctx[11](null);
            mounted = false;
            dispose();
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = svelte_1.createEventDispatcher();
    let { label = undefined } = $$props;
    let { invalid = undefined } = $$props;
    let { name = undefined } = $$props;
    let { value = undefined } = $$props;
    let { helpText = undefined } = $$props;
    let { errorText = undefined } = $$props;
    const getWebComponent = () => __ref;
    svelte_1.onMount(() => {
        __mounted = true;
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(6, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_radio_group_binding($$value) {
        internal_1.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(6, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('label' in $$props)
            $$invalidate(0, label = $$props.label);
        if ('invalid' in $$props)
            $$invalidate(1, invalid = $$props.invalid);
        if ('name' in $$props)
            $$invalidate(2, name = $$props.name);
        if ('value' in $$props)
            $$invalidate(3, value = $$props.value);
        if ('helpText' in $$props)
            $$invalidate(4, helpText = $$props.helpText);
        if ('errorText' in $$props)
            $$invalidate(5, errorText = $$props.errorText);
        if ('$$scope' in $$props)
            $$invalidate(9, $$scope = $$props.$$scope);
    };
    return [
        label,
        invalid,
        name,
        value,
        helpText,
        errorText,
        __ref,
        onEvent,
        getWebComponent,
        $$scope,
        slots,
        rux_radio_group_binding
    ];
}
class RuxRadioGroup extends internal_1.SvelteComponent {
    constructor(options) {
        super();
        internal_1.init(this, options, instance, create_fragment, internal_1.safe_not_equal, {
            label: 0,
            invalid: 1,
            name: 2,
            value: 3,
            helpText: 4,
            errorText: 5,
            getWebComponent: 8
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get label() {
        return this.$$.ctx[0];
    }
    set label(label) {
        this.$$set({ label });
        internal_1.flush();
    }
    get invalid() {
        return this.$$.ctx[1];
    }
    set invalid(invalid) {
        this.$$set({ invalid });
        internal_1.flush();
    }
    get name() {
        return this.$$.ctx[2];
    }
    set name(name) {
        this.$$set({ name });
        internal_1.flush();
    }
    get value() {
        return this.$$.ctx[3];
    }
    set value(value) {
        this.$$set({ value });
        internal_1.flush();
    }
    get helpText() {
        return this.$$.ctx[4];
    }
    set helpText(helpText) {
        this.$$set({ helpText });
        internal_1.flush();
    }
    get errorText() {
        return this.$$.ctx[5];
    }
    set errorText(errorText) {
        this.$$set({ errorText });
        internal_1.flush();
    }
    get getWebComponent() {
        return this.$$.ctx[8];
    }
}
exports.default = RuxRadioGroup;
//# sourceMappingURL=RuxRadioGroup.js.map