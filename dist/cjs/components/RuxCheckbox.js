"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* generated by Svelte v3.42.3 */
const internal_1 = require("svelte/internal");
const svelte_1 = require("svelte");
function create_fragment(ctx) {
    let rux_checkbox;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = /*#slots*/ ctx[12].default;
    const default_slot = internal_1.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
    return {
        c() {
            rux_checkbox = internal_1.element("rux-checkbox");
            if (default_slot)
                default_slot.c();
            internal_1.set_custom_element_data(rux_checkbox, "help-text", /*helpText*/ ctx[0]);
            internal_1.set_custom_element_data(rux_checkbox, "error-text", /*errorText*/ ctx[1]);
            internal_1.set_custom_element_data(rux_checkbox, "name", /*name*/ ctx[2]);
            internal_1.set_custom_element_data(rux_checkbox, "value", /*value*/ ctx[3]);
            internal_1.set_custom_element_data(rux_checkbox, "checked", /*checked*/ ctx[4]);
            internal_1.set_custom_element_data(rux_checkbox, "indeterminate", /*indeterminate*/ ctx[5]);
            internal_1.set_custom_element_data(rux_checkbox, "disabled", /*disabled*/ ctx[6]);
            internal_1.set_custom_element_data(rux_checkbox, "required", /*required*/ ctx[7]);
        },
        m(target, anchor) {
            internal_1.insert(target, rux_checkbox, anchor);
            if (default_slot) {
                default_slot.m(rux_checkbox, null);
            }
            /*rux_checkbox_binding*/ ctx[13](rux_checkbox);
            current = true;
            if (!mounted) {
                dispose = [
                    internal_1.listen(rux_checkbox, "rux-change", /*onEvent*/ ctx[9]),
                    internal_1.listen(rux_checkbox, "rux-input", /*onEvent*/ ctx[9])
                ];
                mounted = true;
            }
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
                    internal_1.update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[11], !current
                        ? internal_1.get_all_dirty_from_scope(/*$$scope*/ ctx[11])
                        : internal_1.get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null), null);
                }
            }
            if (!current || dirty & /*helpText*/ 1) {
                internal_1.set_custom_element_data(rux_checkbox, "help-text", /*helpText*/ ctx[0]);
            }
            if (!current || dirty & /*errorText*/ 2) {
                internal_1.set_custom_element_data(rux_checkbox, "error-text", /*errorText*/ ctx[1]);
            }
            if (!current || dirty & /*name*/ 4) {
                internal_1.set_custom_element_data(rux_checkbox, "name", /*name*/ ctx[2]);
            }
            if (!current || dirty & /*value*/ 8) {
                internal_1.set_custom_element_data(rux_checkbox, "value", /*value*/ ctx[3]);
            }
            if (!current || dirty & /*checked*/ 16) {
                internal_1.set_custom_element_data(rux_checkbox, "checked", /*checked*/ ctx[4]);
            }
            if (!current || dirty & /*indeterminate*/ 32) {
                internal_1.set_custom_element_data(rux_checkbox, "indeterminate", /*indeterminate*/ ctx[5]);
            }
            if (!current || dirty & /*disabled*/ 64) {
                internal_1.set_custom_element_data(rux_checkbox, "disabled", /*disabled*/ ctx[6]);
            }
            if (!current || dirty & /*required*/ 128) {
                internal_1.set_custom_element_data(rux_checkbox, "required", /*required*/ ctx[7]);
            }
        },
        i(local) {
            if (current)
                return;
            internal_1.transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            internal_1.transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                internal_1.detach(rux_checkbox);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_checkbox_binding*/ ctx[13](null);
            mounted = false;
            internal_1.run_all(dispose);
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = svelte_1.createEventDispatcher();
    let { helpText = undefined } = $$props;
    let { errorText = undefined } = $$props;
    let { name = undefined } = $$props;
    let { value = undefined } = $$props;
    let { checked = undefined } = $$props;
    let { indeterminate = undefined } = $$props;
    let { disabled = undefined } = $$props;
    let { required = undefined } = $$props;
    const getWebComponent = () => __ref;
    svelte_1.onMount(() => {
        __mounted = true;
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(8, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_checkbox_binding($$value) {
        internal_1.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(8, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('helpText' in $$props)
            $$invalidate(0, helpText = $$props.helpText);
        if ('errorText' in $$props)
            $$invalidate(1, errorText = $$props.errorText);
        if ('name' in $$props)
            $$invalidate(2, name = $$props.name);
        if ('value' in $$props)
            $$invalidate(3, value = $$props.value);
        if ('checked' in $$props)
            $$invalidate(4, checked = $$props.checked);
        if ('indeterminate' in $$props)
            $$invalidate(5, indeterminate = $$props.indeterminate);
        if ('disabled' in $$props)
            $$invalidate(6, disabled = $$props.disabled);
        if ('required' in $$props)
            $$invalidate(7, required = $$props.required);
        if ('$$scope' in $$props)
            $$invalidate(11, $$scope = $$props.$$scope);
    };
    return [
        helpText,
        errorText,
        name,
        value,
        checked,
        indeterminate,
        disabled,
        required,
        __ref,
        onEvent,
        getWebComponent,
        $$scope,
        slots,
        rux_checkbox_binding
    ];
}
class RuxCheckbox extends internal_1.SvelteComponent {
    constructor(options) {
        super();
        internal_1.init(this, options, instance, create_fragment, internal_1.safe_not_equal, {
            helpText: 0,
            errorText: 1,
            name: 2,
            value: 3,
            checked: 4,
            indeterminate: 5,
            disabled: 6,
            required: 7,
            getWebComponent: 10
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get helpText() {
        return this.$$.ctx[0];
    }
    set helpText(helpText) {
        this.$$set({ helpText });
        internal_1.flush();
    }
    get errorText() {
        return this.$$.ctx[1];
    }
    set errorText(errorText) {
        this.$$set({ errorText });
        internal_1.flush();
    }
    get name() {
        return this.$$.ctx[2];
    }
    set name(name) {
        this.$$set({ name });
        internal_1.flush();
    }
    get value() {
        return this.$$.ctx[3];
    }
    set value(value) {
        this.$$set({ value });
        internal_1.flush();
    }
    get checked() {
        return this.$$.ctx[4];
    }
    set checked(checked) {
        this.$$set({ checked });
        internal_1.flush();
    }
    get indeterminate() {
        return this.$$.ctx[5];
    }
    set indeterminate(indeterminate) {
        this.$$set({ indeterminate });
        internal_1.flush();
    }
    get disabled() {
        return this.$$.ctx[6];
    }
    set disabled(disabled) {
        this.$$set({ disabled });
        internal_1.flush();
    }
    get required() {
        return this.$$.ctx[7];
    }
    set required(required) {
        this.$$set({ required });
        internal_1.flush();
    }
    get getWebComponent() {
        return this.$$.ctx[10];
    }
}
exports.default = RuxCheckbox;
//# sourceMappingURL=RuxCheckbox.js.map