/* generated by Svelte v3.42.3 */
import { SvelteComponent, binding_callbacks, create_slot, detach, element, flush, get_all_dirty_from_scope, get_slot_changes, init, insert, listen, run_all, safe_not_equal, set_custom_element_data, transition_in, transition_out, update_slot_base } from "svelte/internal";
import { createEventDispatcher, onMount } from 'svelte';
function create_fragment(ctx) {
    let rux_pop_up_menu;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = /*#slots*/ ctx[12].default;
    const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
    return {
        c() {
            rux_pop_up_menu = element("rux-pop-up-menu");
            if (default_slot)
                default_slot.c();
            set_custom_element_data(rux_pop_up_menu, "open", /*open*/ ctx[0]);
        },
        m(target, anchor) {
            insert(target, rux_pop_up_menu, anchor);
            if (default_slot) {
                default_slot.m(rux_pop_up_menu, null);
            }
            /*rux_pop_up_menu_binding*/ ctx[13](rux_pop_up_menu);
            current = true;
            if (!mounted) {
                dispose = [
                    listen(rux_pop_up_menu, "rux-menu-will-open", /*onEvent*/ ctx[2]),
                    listen(rux_pop_up_menu, "rux-menu-will-close", /*onEvent*/ ctx[2]),
                    listen(rux_pop_up_menu, "rux-menu-did-open", /*onEvent*/ ctx[2]),
                    listen(rux_pop_up_menu, "rux-menu-did-close", /*onEvent*/ ctx[2])
                ];
                mounted = true;
            }
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
                    update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[11], !current
                        ? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
                        : get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null), null);
                }
            }
            if (!current || dirty & /*open*/ 1) {
                set_custom_element_data(rux_pop_up_menu, "open", /*open*/ ctx[0]);
            }
        },
        i(local) {
            if (current)
                return;
            transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                detach(rux_pop_up_menu);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_pop_up_menu_binding*/ ctx[13](null);
            mounted = false;
            run_all(dispose);
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = createEventDispatcher();
    let { triggerEl = undefined } = $$props;
    let { anchorEl = undefined } = $$props;
    let { open = undefined } = $$props;
    const isOpen = (...args) => __ref.isOpen(...args);
    const show = (...args) => __ref.show(...args);
    const close = (...args) => __ref.close(...args);
    const toggle = (...args) => __ref.toggle(...args);
    const getWebComponent = () => __ref;
    onMount(() => {
        $$invalidate(10, __mounted = true);
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(1, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_pop_up_menu_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(1, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('triggerEl' in $$props)
            $$invalidate(3, triggerEl = $$props.triggerEl);
        if ('anchorEl' in $$props)
            $$invalidate(4, anchorEl = $$props.anchorEl);
        if ('open' in $$props)
            $$invalidate(0, open = $$props.open);
        if ('$$scope' in $$props)
            $$invalidate(11, $$scope = $$props.$$scope);
    };
    $$self.$$.update = () => {
        if ($$self.$$.dirty & /*__mounted, triggerEl*/ 1032) {
            $: if (__mounted)
                setProp('triggerEl', triggerEl);
        }
        if ($$self.$$.dirty & /*__mounted, anchorEl*/ 1040) {
            $: if (__mounted)
                setProp('anchorEl', anchorEl);
        }
    };
    return [
        open,
        __ref,
        onEvent,
        triggerEl,
        anchorEl,
        isOpen,
        show,
        close,
        toggle,
        getWebComponent,
        __mounted,
        $$scope,
        slots,
        rux_pop_up_menu_binding
    ];
}
class RuxPopUpMenu extends SvelteComponent {
    constructor(options) {
        super();
        init(this, options, instance, create_fragment, safe_not_equal, {
            triggerEl: 3,
            anchorEl: 4,
            open: 0,
            isOpen: 5,
            show: 6,
            close: 7,
            toggle: 8,
            getWebComponent: 9
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get triggerEl() {
        return this.$$.ctx[3];
    }
    set triggerEl(triggerEl) {
        this.$$set({ triggerEl });
        flush();
    }
    get anchorEl() {
        return this.$$.ctx[4];
    }
    set anchorEl(anchorEl) {
        this.$$set({ anchorEl });
        flush();
    }
    get open() {
        return this.$$.ctx[0];
    }
    set open(open) {
        this.$$set({ open });
        flush();
    }
    /** Returns 'true' if the menu is open, 'false' if it is not. */
    get isOpen() {
        return this.$$.ctx[5];
    }
    /** Opens the menu. If the menu is already open it returns 'false'. */
    get show() {
        return this.$$.ctx[6];
    }
    /** Closes the menu. If the menu is already closed it returns 'false'. */
    get close() {
        return this.$$.ctx[7];
    }
    /** Toggles the menu open or close. Will return 'true' on menu open and 'false' on menu close */
    get toggle() {
        return this.$$.ctx[8];
    }
    get getWebComponent() {
        return this.$$.ctx[9];
    }
}
export default RuxPopUpMenu;
//# sourceMappingURL=RuxPopUpMenu.js.map