/* generated by Svelte v3.42.3 */
import { SvelteComponent, binding_callbacks, create_slot, detach, element, flush, get_all_dirty_from_scope, get_slot_changes, init, insert, safe_not_equal, set_custom_element_data, transition_in, transition_out, update_slot_base } from "svelte/internal";
import { createEventDispatcher, onMount } from 'svelte';
function create_fragment(ctx) {
    let rux_datetime;
    let current;
    const default_slot_template = /*#slots*/ ctx[14].default;
    const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
    return {
        c() {
            rux_datetime = element("rux-datetime");
            if (default_slot)
                default_slot.c();
            set_custom_element_data(rux_datetime, "date", /*date*/ ctx[0]);
            set_custom_element_data(rux_datetime, "locale", /*locale*/ ctx[1]);
            set_custom_element_data(rux_datetime, "year", /*year*/ ctx[2]);
            set_custom_element_data(rux_datetime, "month", /*month*/ ctx[3]);
            set_custom_element_data(rux_datetime, "day", /*day*/ ctx[4]);
            set_custom_element_data(rux_datetime, "hour", /*hour*/ ctx[5]);
            set_custom_element_data(rux_datetime, "minute", /*minute*/ ctx[6]);
            set_custom_element_data(rux_datetime, "second", /*second*/ ctx[7]);
            set_custom_element_data(rux_datetime, "time-zone-name", /*timeZoneName*/ ctx[8]);
            set_custom_element_data(rux_datetime, "time-zone", /*timeZone*/ ctx[9]);
            set_custom_element_data(rux_datetime, "hour-12", /*hour12*/ ctx[10]);
        },
        m(target, anchor) {
            insert(target, rux_datetime, anchor);
            if (default_slot) {
                default_slot.m(rux_datetime, null);
            }
            /*rux_datetime_binding*/ ctx[15](rux_datetime);
            current = true;
        },
        p(ctx, [dirty]) {
            if (default_slot) {
                if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
                    update_slot_base(default_slot, default_slot_template, ctx, 
                    /*$$scope*/ ctx[13], !current
                        ? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
                        : get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null), null);
                }
            }
            if (!current || dirty & /*date*/ 1) {
                set_custom_element_data(rux_datetime, "date", /*date*/ ctx[0]);
            }
            if (!current || dirty & /*locale*/ 2) {
                set_custom_element_data(rux_datetime, "locale", /*locale*/ ctx[1]);
            }
            if (!current || dirty & /*year*/ 4) {
                set_custom_element_data(rux_datetime, "year", /*year*/ ctx[2]);
            }
            if (!current || dirty & /*month*/ 8) {
                set_custom_element_data(rux_datetime, "month", /*month*/ ctx[3]);
            }
            if (!current || dirty & /*day*/ 16) {
                set_custom_element_data(rux_datetime, "day", /*day*/ ctx[4]);
            }
            if (!current || dirty & /*hour*/ 32) {
                set_custom_element_data(rux_datetime, "hour", /*hour*/ ctx[5]);
            }
            if (!current || dirty & /*minute*/ 64) {
                set_custom_element_data(rux_datetime, "minute", /*minute*/ ctx[6]);
            }
            if (!current || dirty & /*second*/ 128) {
                set_custom_element_data(rux_datetime, "second", /*second*/ ctx[7]);
            }
            if (!current || dirty & /*timeZoneName*/ 256) {
                set_custom_element_data(rux_datetime, "time-zone-name", /*timeZoneName*/ ctx[8]);
            }
            if (!current || dirty & /*timeZone*/ 512) {
                set_custom_element_data(rux_datetime, "time-zone", /*timeZone*/ ctx[9]);
            }
            if (!current || dirty & /*hour12*/ 1024) {
                set_custom_element_data(rux_datetime, "hour-12", /*hour12*/ ctx[10]);
            }
        },
        i(local) {
            if (current)
                return;
            transition_in(default_slot, local);
            current = true;
        },
        o(local) {
            transition_out(default_slot, local);
            current = false;
        },
        d(detaching) {
            if (detaching)
                detach(rux_datetime);
            if (default_slot)
                default_slot.d(detaching);
            /*rux_datetime_binding*/ ctx[15](null);
        }
    };
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let __ref;
    let __mounted = false;
    const dispatch = createEventDispatcher();
    let { date = undefined } = $$props;
    let { locale = undefined } = $$props;
    let { year = undefined } = $$props;
    let { month = undefined } = $$props;
    let { day = undefined } = $$props;
    let { hour = undefined } = $$props;
    let { minute = undefined } = $$props;
    let { second = undefined } = $$props;
    let { timeZoneName = undefined } = $$props;
    let { timeZone = undefined } = $$props;
    let { hour12 = undefined } = $$props;
    const getWebComponent = () => __ref;
    onMount(() => {
        __mounted = true;
    });
    const setProp = (prop, value) => {
        if (__ref)
            $$invalidate(11, __ref[prop] = value, __ref);
    };
    const onEvent = e => {
        e.stopPropagation();
        dispatch(e.type, e.detail);
    };
    function rux_datetime_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](() => {
            __ref = $$value;
            $$invalidate(11, __ref);
        });
    }
    $$self.$$set = $$props => {
        if ('date' in $$props)
            $$invalidate(0, date = $$props.date);
        if ('locale' in $$props)
            $$invalidate(1, locale = $$props.locale);
        if ('year' in $$props)
            $$invalidate(2, year = $$props.year);
        if ('month' in $$props)
            $$invalidate(3, month = $$props.month);
        if ('day' in $$props)
            $$invalidate(4, day = $$props.day);
        if ('hour' in $$props)
            $$invalidate(5, hour = $$props.hour);
        if ('minute' in $$props)
            $$invalidate(6, minute = $$props.minute);
        if ('second' in $$props)
            $$invalidate(7, second = $$props.second);
        if ('timeZoneName' in $$props)
            $$invalidate(8, timeZoneName = $$props.timeZoneName);
        if ('timeZone' in $$props)
            $$invalidate(9, timeZone = $$props.timeZone);
        if ('hour12' in $$props)
            $$invalidate(10, hour12 = $$props.hour12);
        if ('$$scope' in $$props)
            $$invalidate(13, $$scope = $$props.$$scope);
    };
    return [
        date,
        locale,
        year,
        month,
        day,
        hour,
        minute,
        second,
        timeZoneName,
        timeZone,
        hour12,
        __ref,
        getWebComponent,
        $$scope,
        slots,
        rux_datetime_binding
    ];
}
class RuxDatetime extends SvelteComponent {
    constructor(options) {
        super();
        init(this, options, instance, create_fragment, safe_not_equal, {
            date: 0,
            locale: 1,
            year: 2,
            month: 3,
            day: 4,
            hour: 5,
            minute: 6,
            second: 7,
            timeZoneName: 8,
            timeZone: 9,
            hour12: 10,
            getWebComponent: 12
        });
    }
    $on(type, callback) {
        return super.$on(type, callback);
    }
    $set($$props) {
        super.$set($$props);
    }
    get date() {
        return this.$$.ctx[0];
    }
    set date(date) {
        this.$$set({ date });
        flush();
    }
    get locale() {
        return this.$$.ctx[1];
    }
    set locale(locale) {
        this.$$set({ locale });
        flush();
    }
    get year() {
        return this.$$.ctx[2];
    }
    set year(year) {
        this.$$set({ year });
        flush();
    }
    get month() {
        return this.$$.ctx[3];
    }
    set month(month) {
        this.$$set({ month });
        flush();
    }
    get day() {
        return this.$$.ctx[4];
    }
    set day(day) {
        this.$$set({ day });
        flush();
    }
    get hour() {
        return this.$$.ctx[5];
    }
    set hour(hour) {
        this.$$set({ hour });
        flush();
    }
    get minute() {
        return this.$$.ctx[6];
    }
    set minute(minute) {
        this.$$set({ minute });
        flush();
    }
    get second() {
        return this.$$.ctx[7];
    }
    set second(second) {
        this.$$set({ second });
        flush();
    }
    get timeZoneName() {
        return this.$$.ctx[8];
    }
    set timeZoneName(timeZoneName) {
        this.$$set({ timeZoneName });
        flush();
    }
    get timeZone() {
        return this.$$.ctx[9];
    }
    set timeZone(timeZone) {
        this.$$set({ timeZone });
        flush();
    }
    get hour12() {
        return this.$$.ctx[10];
    }
    set hour12(hour12) {
        this.$$set({ hour12 });
        flush();
    }
    get getWebComponent() {
        return this.$$.ctx[12];
    }
}
export default RuxDatetime;
//# sourceMappingURL=RuxDatetime.js.map