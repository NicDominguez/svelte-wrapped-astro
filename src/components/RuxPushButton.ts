/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@astrouxds/astro-web-components';


interface RuxPushButtonProps {
  
  /** Disables the push button via HTML `disabled` attribute.
Button takes on a distinct disabled visual state.
Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored. */
  disabled?: Components.RuxPushButton["disabled"]
  
  /** Checks the push button via HTML `checked` attribute.
Push button takes on a distinct "enabled" or "selected" visual state. */
  checked?: Components.RuxPushButton["checked"]
  
  /** The label of the push button. */
  label?: Components.RuxPushButton["label"]
  
  /** The name of the push button. */
  name?: Components.RuxPushButton["name"]
  
  /** The value of the push button. */
  value?: Components.RuxPushButton["value"]
}

interface RuxPushButtonEvents {
  
  /** Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) */
  "rux-change": Parameters<JSX.RuxPushButton["onRux-change"]>[0]
}

interface RuxPushButtonSlots {
  default: any
}
  
/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let rux_push_button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			rux_push_button = element("rux-push-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(rux_push_button, "disabled", /*disabled*/ ctx[0]);
			set_custom_element_data(rux_push_button, "checked", /*checked*/ ctx[1]);
			set_custom_element_data(rux_push_button, "label", /*label*/ ctx[2]);
			set_custom_element_data(rux_push_button, "name", /*name*/ ctx[3]);
			set_custom_element_data(rux_push_button, "value", /*value*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, rux_push_button, anchor);

			if (default_slot) {
				default_slot.m(rux_push_button, null);
			}

			/*rux_push_button_binding*/ ctx[10](rux_push_button);
			current = true;

			if (!mounted) {
				dispose = listen(rux_push_button, "rux-change", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*disabled*/ 1) {
				set_custom_element_data(rux_push_button, "disabled", /*disabled*/ ctx[0]);
			}

			if (!current || dirty & /*checked*/ 2) {
				set_custom_element_data(rux_push_button, "checked", /*checked*/ ctx[1]);
			}

			if (!current || dirty & /*label*/ 4) {
				set_custom_element_data(rux_push_button, "label", /*label*/ ctx[2]);
			}

			if (!current || dirty & /*name*/ 8) {
				set_custom_element_data(rux_push_button, "name", /*name*/ ctx[3]);
			}

			if (!current || dirty & /*value*/ 16) {
				set_custom_element_data(rux_push_button, "value", /*value*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(rux_push_button);
			if (default_slot) default_slot.d(detaching);
			/*rux_push_button_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { disabled = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { label = undefined } = $$props;
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function rux_push_button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
		if ('checked' in $$props) $$invalidate(1, checked = $$props.checked);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('name' in $$props) $$invalidate(3, name = $$props.name);
		if ('value' in $$props) $$invalidate(4, value = $$props.value);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		disabled,
		checked,
		label,
		name,
		value,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		rux_push_button_binding
	];
}

class RuxPushButton extends SvelteComponent {
  $$prop_def: RuxPushButtonProps;
  $$events_def: RuxPushButtonEvents;
  $$slot_def: RuxPushButtonSlots;

  $on<K extends keyof RuxPushButtonEvents>(type: K, callback: (e: RuxPushButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RuxPushButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			disabled: 0,
			checked: 1,
			label: 2,
			name: 3,
			value: 4,
			getWebComponent: 7
		});
	}

	get disabled() {
		return this.$$.ctx[0];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get checked() {
		return this.$$.ctx[1];
	}

	set checked(checked) {
		this.$$set({ checked });
		flush();
	}

	get label() {
		return this.$$.ctx[2];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get name() {
		return this.$$.ctx[3];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}

	get value() {
		return this.$$.ctx[4];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get getWebComponent(): HTMLRuxPushButtonElement | undefined {
		return this.$$.ctx[7];
	}
}

export default RuxPushButton;