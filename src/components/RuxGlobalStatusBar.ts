/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@astrouxds/astro-web-components';


interface RuxGlobalStatusBarProps {
  
  /** Declares whether a rux-icon will be shown in the left-side slot */
  includeIcon?: Components.RuxGlobalStatusBar["includeIcon"]
  
  /** Declares whether the app-state component will be shown in the app-meta slot */
  includeAppState?: Components.RuxGlobalStatusBar["includeAppState"]
  
  /** Declares whether the username component will be shown in the app-meta slot */
  includeUsername?: Components.RuxGlobalStatusBar["includeUsername"]
  
  /** Sets the domain of the application to be displayed in the app-meta element */
  appDomain?: Components.RuxGlobalStatusBar["appDomain"]
  
  /** Sets the name of the application to be displayed in the app-meta element */
  appName?: Components.RuxGlobalStatusBar["appName"]
  
  /** Sets the version of the application to be displayed in the app-meta element */
  appVersion?: Components.RuxGlobalStatusBar["appVersion"]
  
  /** Sets the icon to be displayed in the default rux-icon component */
  menuIcon?: Components.RuxGlobalStatusBar["menuIcon"]
}

interface RuxGlobalStatusBarEvents {
  
}

interface RuxGlobalStatusBarSlots {
  default: any
}
  
/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let rux_global_status_bar;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			rux_global_status_bar = element("rux-global-status-bar");
			if (default_slot) default_slot.c();
			set_custom_element_data(rux_global_status_bar, "include-icon", /*includeIcon*/ ctx[0]);
			set_custom_element_data(rux_global_status_bar, "include-app-state", /*includeAppState*/ ctx[1]);
			set_custom_element_data(rux_global_status_bar, "include-username", /*includeUsername*/ ctx[2]);
			set_custom_element_data(rux_global_status_bar, "app-domain", /*appDomain*/ ctx[3]);
			set_custom_element_data(rux_global_status_bar, "app-name", /*appName*/ ctx[4]);
			set_custom_element_data(rux_global_status_bar, "app-version", /*appVersion*/ ctx[5]);
			set_custom_element_data(rux_global_status_bar, "menu-icon", /*menuIcon*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, rux_global_status_bar, anchor);

			if (default_slot) {
				default_slot.m(rux_global_status_bar, null);
			}

			/*rux_global_status_bar_binding*/ ctx[11](rux_global_status_bar);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*includeIcon*/ 1) {
				set_custom_element_data(rux_global_status_bar, "include-icon", /*includeIcon*/ ctx[0]);
			}

			if (!current || dirty & /*includeAppState*/ 2) {
				set_custom_element_data(rux_global_status_bar, "include-app-state", /*includeAppState*/ ctx[1]);
			}

			if (!current || dirty & /*includeUsername*/ 4) {
				set_custom_element_data(rux_global_status_bar, "include-username", /*includeUsername*/ ctx[2]);
			}

			if (!current || dirty & /*appDomain*/ 8) {
				set_custom_element_data(rux_global_status_bar, "app-domain", /*appDomain*/ ctx[3]);
			}

			if (!current || dirty & /*appName*/ 16) {
				set_custom_element_data(rux_global_status_bar, "app-name", /*appName*/ ctx[4]);
			}

			if (!current || dirty & /*appVersion*/ 32) {
				set_custom_element_data(rux_global_status_bar, "app-version", /*appVersion*/ ctx[5]);
			}

			if (!current || dirty & /*menuIcon*/ 64) {
				set_custom_element_data(rux_global_status_bar, "menu-icon", /*menuIcon*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(rux_global_status_bar);
			if (default_slot) default_slot.d(detaching);
			/*rux_global_status_bar_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { includeIcon = undefined } = $$props;
	let { includeAppState = undefined } = $$props;
	let { includeUsername = undefined } = $$props;
	let { appDomain = undefined } = $$props;
	let { appName = undefined } = $$props;
	let { appVersion = undefined } = $$props;
	let { menuIcon = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function rux_global_status_bar_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('includeIcon' in $$props) $$invalidate(0, includeIcon = $$props.includeIcon);
		if ('includeAppState' in $$props) $$invalidate(1, includeAppState = $$props.includeAppState);
		if ('includeUsername' in $$props) $$invalidate(2, includeUsername = $$props.includeUsername);
		if ('appDomain' in $$props) $$invalidate(3, appDomain = $$props.appDomain);
		if ('appName' in $$props) $$invalidate(4, appName = $$props.appName);
		if ('appVersion' in $$props) $$invalidate(5, appVersion = $$props.appVersion);
		if ('menuIcon' in $$props) $$invalidate(6, menuIcon = $$props.menuIcon);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		includeIcon,
		includeAppState,
		includeUsername,
		appDomain,
		appName,
		appVersion,
		menuIcon,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		rux_global_status_bar_binding
	];
}

class RuxGlobalStatusBar extends SvelteComponent {
  $$prop_def: RuxGlobalStatusBarProps;
  $$events_def: RuxGlobalStatusBarEvents;
  $$slot_def: RuxGlobalStatusBarSlots;

  $on<K extends keyof RuxGlobalStatusBarEvents>(type: K, callback: (e: RuxGlobalStatusBarEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RuxGlobalStatusBarProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			includeIcon: 0,
			includeAppState: 1,
			includeUsername: 2,
			appDomain: 3,
			appName: 4,
			appVersion: 5,
			menuIcon: 6,
			getWebComponent: 8
		});
	}

	get includeIcon() {
		return this.$$.ctx[0];
	}

	set includeIcon(includeIcon) {
		this.$$set({ includeIcon });
		flush();
	}

	get includeAppState() {
		return this.$$.ctx[1];
	}

	set includeAppState(includeAppState) {
		this.$$set({ includeAppState });
		flush();
	}

	get includeUsername() {
		return this.$$.ctx[2];
	}

	set includeUsername(includeUsername) {
		this.$$set({ includeUsername });
		flush();
	}

	get appDomain() {
		return this.$$.ctx[3];
	}

	set appDomain(appDomain) {
		this.$$set({ appDomain });
		flush();
	}

	get appName() {
		return this.$$.ctx[4];
	}

	set appName(appName) {
		this.$$set({ appName });
		flush();
	}

	get appVersion() {
		return this.$$.ctx[5];
	}

	set appVersion(appVersion) {
		this.$$set({ appVersion });
		flush();
	}

	get menuIcon() {
		return this.$$.ctx[6];
	}

	set menuIcon(menuIcon) {
		this.$$set({ menuIcon });
		flush();
	}

	get getWebComponent(): HTMLRuxGlobalStatusBarElement | undefined {
		return this.$$.ctx[8];
	}
}

export default RuxGlobalStatusBar;