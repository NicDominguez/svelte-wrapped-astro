/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@astrouxds/astro-web-components';


interface RuxLogProps {
  
  /** An array of objects to display as log */
  data?: Components.RuxLog["data"]
  
  /** Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details. */
  timezone?: Components.RuxLog["timezone"]
  
  /** A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match. */
  filter?: Components.RuxLog["filter"]
}

interface RuxLogEvents {
  
}

interface RuxLogSlots {
  default: any
}
  
/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let rux_log;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			rux_log = element("rux-log");
			if (default_slot) default_slot.c();
			set_custom_element_data(rux_log, "timezone", /*timezone*/ ctx[0]);
			set_custom_element_data(rux_log, "filter", /*filter*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, rux_log, anchor);

			if (default_slot) {
				default_slot.m(rux_log, null);
			}

			/*rux_log_binding*/ ctx[8](rux_log);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*timezone*/ 1) {
				set_custom_element_data(rux_log, "timezone", /*timezone*/ ctx[0]);
			}

			if (!current || dirty & /*filter*/ 2) {
				set_custom_element_data(rux_log, "filter", /*filter*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(rux_log);
			if (default_slot) default_slot.d(detaching);
			/*rux_log_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { data = undefined } = $$props;
	let { timezone = undefined } = $$props;
	let { filter = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(5, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function rux_log_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(3, data = $$props.data);
		if ('timezone' in $$props) $$invalidate(0, timezone = $$props.timezone);
		if ('filter' in $$props) $$invalidate(1, filter = $$props.filter);
		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, data*/ 40) {
			$: if (__mounted) setProp('data', data);
		}
	};

	return [
		timezone,
		filter,
		__ref,
		data,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		rux_log_binding
	];
}

class RuxLog extends SvelteComponent {
  $$prop_def: RuxLogProps;
  $$events_def: RuxLogEvents;
  $$slot_def: RuxLogSlots;

  $on<K extends keyof RuxLogEvents>(type: K, callback: (e: RuxLogEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RuxLogProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			data: 3,
			timezone: 0,
			filter: 1,
			getWebComponent: 4
		});
	}

	get data() {
		return this.$$.ctx[3];
	}

	set data(data) {
		this.$$set({ data });
		flush();
	}

	get timezone() {
		return this.$$.ctx[0];
	}

	set timezone(timezone) {
		this.$$set({ timezone });
		flush();
	}

	get filter() {
		return this.$$.ctx[1];
	}

	set filter(filter) {
		this.$$set({ filter });
		flush();
	}

	get getWebComponent(): HTMLRuxLogElement | undefined {
		return this.$$.ctx[4];
	}
}

export default RuxLog;