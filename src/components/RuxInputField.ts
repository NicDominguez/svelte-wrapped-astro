/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@astrouxds/astro-web-components';


interface RuxInputFieldProps {
  
  /** The input label text */
  label?: Components.RuxInputField["label"]
  
  /** The input placeholder text */
  placeholder?: Components.RuxInputField["placeholder"]
  
  /** The help or explanation text */
  helpText?: Components.RuxInputField["helpText"]
  
  /** The validation error text */
  errorText?: Components.RuxInputField["errorText"]
  
  /** Marks the input as invalid */
  invalid?: Components.RuxInputField["invalid"]
  
  /** The input value */
  value?: Components.RuxInputField["value"]
  
  /** The input name */
  name?: Components.RuxInputField["name"]
  
  /** The input type */
  type?: Components.RuxInputField["type"]
  
  /** The input min attribute */
  min?: Components.RuxInputField["min"]
  
  /** The input max attribute */
  max?: Components.RuxInputField["max"]
  
  /** Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored. */
  disabled?: Components.RuxInputField["disabled"]
  
  /** Sets the input as disabled */
  required?: Components.RuxInputField["required"]
  
  /** Styles the input element and label smaller for space-limited situations. */
  small?: Components.RuxInputField["small"]
  
  /** The input step attribute */
  step?: Components.RuxInputField["step"]
}

interface RuxInputFieldEvents {
  
  /** Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) */
  "rux-change": Parameters<JSX.RuxInputField["onRux-change"]>[0]
  
  /** Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) */
  "rux-input": Parameters<JSX.RuxInputField["onRux-input"]>[0]
}

interface RuxInputFieldSlots {
  default: any
}
  
/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let rux_input_field;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

	return {
		c() {
			rux_input_field = element("rux-input-field");
			if (default_slot) default_slot.c();
			set_custom_element_data(rux_input_field, "label", /*label*/ ctx[0]);
			set_custom_element_data(rux_input_field, "placeholder", /*placeholder*/ ctx[1]);
			set_custom_element_data(rux_input_field, "help-text", /*helpText*/ ctx[2]);
			set_custom_element_data(rux_input_field, "error-text", /*errorText*/ ctx[3]);
			set_custom_element_data(rux_input_field, "invalid", /*invalid*/ ctx[4]);
			set_custom_element_data(rux_input_field, "value", /*value*/ ctx[5]);
			set_custom_element_data(rux_input_field, "name", /*name*/ ctx[6]);
			set_custom_element_data(rux_input_field, "type", /*type*/ ctx[7]);
			set_custom_element_data(rux_input_field, "min", /*min*/ ctx[8]);
			set_custom_element_data(rux_input_field, "max", /*max*/ ctx[9]);
			set_custom_element_data(rux_input_field, "disabled", /*disabled*/ ctx[10]);
			set_custom_element_data(rux_input_field, "required", /*required*/ ctx[11]);
			set_custom_element_data(rux_input_field, "small", /*small*/ ctx[12]);
			set_custom_element_data(rux_input_field, "step", /*step*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, rux_input_field, anchor);

			if (default_slot) {
				default_slot.m(rux_input_field, null);
			}

			/*rux_input_field_binding*/ ctx[19](rux_input_field);
			current = true;

			if (!mounted) {
				dispose = [
					listen(rux_input_field, "rux-change", /*onEvent*/ ctx[15]),
					listen(rux_input_field, "rux-input", /*onEvent*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[17],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*label*/ 1) {
				set_custom_element_data(rux_input_field, "label", /*label*/ ctx[0]);
			}

			if (!current || dirty & /*placeholder*/ 2) {
				set_custom_element_data(rux_input_field, "placeholder", /*placeholder*/ ctx[1]);
			}

			if (!current || dirty & /*helpText*/ 4) {
				set_custom_element_data(rux_input_field, "help-text", /*helpText*/ ctx[2]);
			}

			if (!current || dirty & /*errorText*/ 8) {
				set_custom_element_data(rux_input_field, "error-text", /*errorText*/ ctx[3]);
			}

			if (!current || dirty & /*invalid*/ 16) {
				set_custom_element_data(rux_input_field, "invalid", /*invalid*/ ctx[4]);
			}

			if (!current || dirty & /*value*/ 32) {
				set_custom_element_data(rux_input_field, "value", /*value*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				set_custom_element_data(rux_input_field, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*type*/ 128) {
				set_custom_element_data(rux_input_field, "type", /*type*/ ctx[7]);
			}

			if (!current || dirty & /*min*/ 256) {
				set_custom_element_data(rux_input_field, "min", /*min*/ ctx[8]);
			}

			if (!current || dirty & /*max*/ 512) {
				set_custom_element_data(rux_input_field, "max", /*max*/ ctx[9]);
			}

			if (!current || dirty & /*disabled*/ 1024) {
				set_custom_element_data(rux_input_field, "disabled", /*disabled*/ ctx[10]);
			}

			if (!current || dirty & /*required*/ 2048) {
				set_custom_element_data(rux_input_field, "required", /*required*/ ctx[11]);
			}

			if (!current || dirty & /*small*/ 4096) {
				set_custom_element_data(rux_input_field, "small", /*small*/ ctx[12]);
			}

			if (!current || dirty & /*step*/ 8192) {
				set_custom_element_data(rux_input_field, "step", /*step*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(rux_input_field);
			if (default_slot) default_slot.d(detaching);
			/*rux_input_field_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { label = undefined } = $$props;
	let { placeholder = undefined } = $$props;
	let { helpText = undefined } = $$props;
	let { errorText = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { value = undefined } = $$props;
	let { name = undefined } = $$props;
	let { type = undefined } = $$props;
	let { min = undefined } = $$props;
	let { max = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { required = undefined } = $$props;
	let { small = undefined } = $$props;
	let { step = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(14, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function rux_input_field_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(14, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('placeholder' in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ('helpText' in $$props) $$invalidate(2, helpText = $$props.helpText);
		if ('errorText' in $$props) $$invalidate(3, errorText = $$props.errorText);
		if ('invalid' in $$props) $$invalidate(4, invalid = $$props.invalid);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('name' in $$props) $$invalidate(6, name = $$props.name);
		if ('type' in $$props) $$invalidate(7, type = $$props.type);
		if ('min' in $$props) $$invalidate(8, min = $$props.min);
		if ('max' in $$props) $$invalidate(9, max = $$props.max);
		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
		if ('required' in $$props) $$invalidate(11, required = $$props.required);
		if ('small' in $$props) $$invalidate(12, small = $$props.small);
		if ('step' in $$props) $$invalidate(13, step = $$props.step);
		if ('$$scope' in $$props) $$invalidate(17, $$scope = $$props.$$scope);
	};

	return [
		label,
		placeholder,
		helpText,
		errorText,
		invalid,
		value,
		name,
		type,
		min,
		max,
		disabled,
		required,
		small,
		step,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		rux_input_field_binding
	];
}

class RuxInputField extends SvelteComponent {
  $$prop_def: RuxInputFieldProps;
  $$events_def: RuxInputFieldEvents;
  $$slot_def: RuxInputFieldSlots;

  $on<K extends keyof RuxInputFieldEvents>(type: K, callback: (e: RuxInputFieldEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RuxInputFieldProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			placeholder: 1,
			helpText: 2,
			errorText: 3,
			invalid: 4,
			value: 5,
			name: 6,
			type: 7,
			min: 8,
			max: 9,
			disabled: 10,
			required: 11,
			small: 12,
			step: 13,
			getWebComponent: 16
		});
	}

	get label() {
		return this.$$.ctx[0];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get placeholder() {
		return this.$$.ctx[1];
	}

	set placeholder(placeholder) {
		this.$$set({ placeholder });
		flush();
	}

	get helpText() {
		return this.$$.ctx[2];
	}

	set helpText(helpText) {
		this.$$set({ helpText });
		flush();
	}

	get errorText() {
		return this.$$.ctx[3];
	}

	set errorText(errorText) {
		this.$$set({ errorText });
		flush();
	}

	get invalid() {
		return this.$$.ctx[4];
	}

	set invalid(invalid) {
		this.$$set({ invalid });
		flush();
	}

	get value() {
		return this.$$.ctx[5];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get name() {
		return this.$$.ctx[6];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}

	get type() {
		return this.$$.ctx[7];
	}

	set type(type) {
		this.$$set({ type });
		flush();
	}

	get min() {
		return this.$$.ctx[8];
	}

	set min(min) {
		this.$$set({ min });
		flush();
	}

	get max() {
		return this.$$.ctx[9];
	}

	set max(max) {
		this.$$set({ max });
		flush();
	}

	get disabled() {
		return this.$$.ctx[10];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get required() {
		return this.$$.ctx[11];
	}

	set required(required) {
		this.$$set({ required });
		flush();
	}

	get small() {
		return this.$$.ctx[12];
	}

	set small(small) {
		this.$$set({ small });
		flush();
	}

	get step() {
		return this.$$.ctx[13];
	}

	set step(step) {
		this.$$set({ step });
		flush();
	}

	get getWebComponent(): HTMLRuxInputFieldElement | undefined {
		return this.$$.ctx[16];
	}
}

export default RuxInputField;